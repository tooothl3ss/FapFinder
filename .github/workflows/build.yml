name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Only run on tag pushes, for example v1.0.0

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        arch: [ x86_64, i386 ]
    runs-on: ${{ matrix.os }}
    outputs:
      asset_path: ${{ steps.set_asset_path.outputs.asset_path }}
      asset_name: ${{ steps.set_asset_path.outputs.asset_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Install UPX on Linux or Windows
      - name: Install UPX on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y upx

      - name: Install UPX on Windows
        if: runner.os == 'Windows'
        run: choco install upx -y

      # Build binary (example uses Go; adjust for your project)
      - name: Build binary
        shell: bash
        env:
          GOOS: ${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "i386" ]; then
              GOARCH=386 go build -o app.exe .
            else
              GOARCH=amd64 go build -o app.exe .
            fi
          else
            if [ "${{ matrix.arch }}" = "i386" ]; then
              GOARCH=386 go build -o app .
            else
              GOARCH=amd64 go build -o app .
            fi
          fi

      # Compress binary with UPX
      - name: Compress binary with UPX
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            upx --best app.exe
          else
            upx --best app
          fi

      # Rename binary according to your naming scheme
      - name: Rename binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "i386" ]; then
              mv app.exe FapFinder32.exe
            else
              mv app.exe FapFinder.exe
            fi
          else
            if [ "${{ matrix.arch }}" = "i386" ]; then
              mv app FapFinder32
            else
              mv app FapFinder
            fi
          fi

      # Prepare the binary for release (move to a dedicated folder)
      - name: Prepare dist folder
        shell: bash
        run: |
          mkdir -p dist
          mv FapFinder* dist/

      # Set output variables for the release job
      - name: Set asset path and name
        id: set_asset_path
        shell: bash
        run: |
          # Choose asset name based on OS and architecture
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "i386" ]; then
              ASSET_NAME="FapFinder32.exe"
            else
              ASSET_NAME="FapFinder.exe"
            fi
          else
            if [ "${{ matrix.arch }}" = "i386" ]; then
              ASSET_NAME="FapFinder32"
            else
              ASSET_NAME="FapFinder64"
            fi
          fi
          # Assume there's only one file in dist
          ASSET_PATH=$(realpath dist/$ASSET_NAME)
          echo "::set-output name=asset_path::$ASSET_PATH"
          echo "::set-output name=asset_name::$ASSET_NAME"
  
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
