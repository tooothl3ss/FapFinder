permissions:
  contents: write

name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger only on tag pushes, e.g. v1.0.0

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        arch: [ x86_64, i386 ]
    runs-on: ${{ matrix.os }}
    outputs:
      asset_path: ${{ steps.set_asset_path.outputs.asset_path }}
      asset_name: ${{ steps.set_asset_path.outputs.asset_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install UPX on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y upx

      - name: Install UPX on Windows
        if: runner.os == 'Windows'
        run: choco install upx -y

      - name: Build binary
        shell: bash
        env:
          GOOS: ${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "i386" ]; then
              GOARCH=386 go build -o app.exe .
            else
              GOARCH=amd64 go build -o app.exe .
            fi
          else
            if [ "${{ matrix.arch }}" = "i386" ]; then
              GOARCH=386 go build -o app .
            else
              GOARCH=amd64 go build -o app .
            fi
          fi

      - name: Compress binary with UPX
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            upx --best app.exe
          else
            upx --best app
          fi

      - name: Rename binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "i386" ]; then
              mv app.exe FapFinder32.exe
            else
              mv app.exe FapFinder.exe
            fi
          else
            if [ "${{ matrix.arch }}" = "i386" ]; then
              mv app FapFinder32
            else
              mv app FapFinder
            fi
          fi

      - name: Prepare dist folder
        shell: bash
        run: |
          mkdir -p dist
          mv FapFinder* dist/

      - name: Set asset path and name
        id: set_asset_path
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "i386" ]; then
              ASSET_NAME="FapFinder32.exe"
            else
              ASSET_NAME="FapFinder.exe"
            fi
          else
            if [ "${{ matrix.arch }}" = "i386" ]; then
              ASSET_NAME="FapFinder32"
            else
              ASSET_NAME="FapFinder64"
            fi
          fi
          ASSET_PATH=$(realpath dist/$ASSET_NAME)
          echo "::set-output name=asset_path::$ASSET_PATH"
          echo "::set-output name=asset_name::$ASSET_NAME"

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Release Upload URL
        id: get_release_url
        shell: bash
        run: |
          echo "Fetching release upload URL for tag ${{ github.ref_name }}..."
          upload_url=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" | jq -r .upload_url)
          if [[ "$upload_url" == "null" || -z "$upload_url" ]]; then
            echo "Error: Release for tag ${{ github.ref_name }} not found!"
            exit 1
          fi
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.asset_path }}
          asset_name: ${{ needs.build.outputs.asset_name }}
          asset_content_type: application/octet-stream

