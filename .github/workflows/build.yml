name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        arch: [ x86_64, i386 ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Install UPX based on runner OS
      - name: Install UPX on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y upx

      - name: Install UPX on Windows
        if: runner.os == 'Windows'
        run: choco install upx -y

      # Build binary (example uses Go; adjust as needed)
      - name: Build binary
        shell: bash
        env:
          GOOS: ${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "i386" ]; then
              GOARCH=386 go build -o app.exe .
            else
              GOARCH=amd64 go build -o app.exe .
            fi
          else
            if [ "${{ matrix.arch }}" = "i386" ]; then
              GOARCH=386 go build -o app .
            else
              GOARCH=amd64 go build -o app .
            fi
          fi

      # Compress the binary with UPX
      - name: Compress binary with UPX
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            upx --best app.exe
          else
            upx --best app
          fi

      # Rename the binary according to your naming scheme
      - name: Rename binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "i386" ]; then
              mv app.exe FapFinder32.exe
            else
              mv app.exe FapFinder.exe
            fi
          else
            if [ "${{ matrix.arch }}" = "i386" ]; then
              mv app FapFinder32
            else
              mv app FapFinder
            fi
          fi
      # Move the binary to a dist folder so only it is uploaded
      - name: Prepare distribution folder
        shell: bash
        run: |
          rm -rf *.go

      # Upload the artifact with a customized name and only the binary file
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: FapFinder${{ matrix.os == 'ubuntu-latest' && 'l' || '' }}${{ matrix.arch == 'i386' && '32' || '' }}
          path: FapFinder*

